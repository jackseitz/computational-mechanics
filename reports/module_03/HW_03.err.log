Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.18/x64/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Define the smd function from the second picture
def smd(state, omega=2.0, zeta=0.2):
    x, v = state  # Unpack the state vector
    derivs = np.array([v, -zeta*omega*v - omega**2*x])  # Compute derivatives
    return derivs

#Initial conditions
x0 = 2.0  # initial position
v0 = 0.0  # initial velocity
state = np.array([x0, v0])

#Simulation parameters
t_end = 3 * (2 * np.pi / omega)  # three periods of oscillation
dt = 0.01  # time step

#Euler method integration
def euler_integration(state, t_end, dt):
    t = 0
    states = [state]
    while t < t_end:
        state = state + dt * smd(state)
        states.append(state)
        t += dt
    return np.array(states)

#Second order Runge-Kutta (Modified Euler) integration
def rk2_integration(state, t_end, dt):
    t = 0
    states = [state]
    while t < t_end:
        k1 = smd(state)
        k2 = smd(state + dt * k1)
        state = state + (dt / 2) * (k1 + k2)
        states.append(state)
        t += dt
    return np.array(states)

#Heun's method integration
def heun_integration(state, t_end, dt):
    t = 0
    states = [state]
    while t < t_end:
        initial_slope = smd(state)
        end_state = state + dt * initial_slope
        corrected_slope = smd(end_state)
        state = state + (dt / 2) * (initial_slope + corrected_slope)
        states.append(state)
        t += dt
    return np.array(states)

#Perform the integrations
states_euler = euler_integration(state, t_end, dt)
states_rk2 = rk2_integration(state, t_end, dt)
states_heun = heun_integration(state, t_end, dt)

#Extract positions for plotting
positions_euler = states_euler[:, 0]
positions_rk2 = states_rk2[:, 0]
positions_heun = states_heun[:, 0]
times = np.arange(0, t_end+dt, dt)

#Plot the results
plt.figure(figsize=(10, 6))
plt.plot(times, positions_euler, label='Euler Integration')
plt.plot(times, positions_rk2, label='RK2 Integration')
plt.plot(times, positions_heun, label='Heun Integration')
plt.xlabel('Time (s)')
plt.ylabel('Position (m)')
plt.title('Numerical Integration Comparison')
plt.legend()
plt.grid(True)
plt.show()

'''For Euler's method, the error is proportional to the time step (first-order). For RK2 and Heun's method, the error is proportional to the square of the time step (second-order)'''
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[12], line 13[0m
[1;32m     10[0m state [38;5;241m=[39m np[38;5;241m.[39marray([x0, v0])
[1;32m     12[0m [38;5;66;03m#Simulation parameters[39;00m
[0;32m---> 13[0m t_end [38;5;241m=[39m [38;5;241m3[39m [38;5;241m*[39m ([38;5;241m2[39m [38;5;241m*[39m np[38;5;241m.[39mpi [38;5;241m/[39m [43momega[49m)  [38;5;66;03m# three periods of oscillation[39;00m
[1;32m     14[0m dt [38;5;241m=[39m [38;5;241m0.01[39m  [38;5;66;03m# time step[39;00m
[1;32m     16[0m [38;5;66;03m#Euler method integration[39;00m

[0;31mNameError[0m: name 'omega' is not defined

